package Assignment3;

public class AssignedCatalog {
    private RCar[] assignedCars;
    private int count; // To keep track of the actual number of assigned cars

    public AssignedCatalog(int capacity) {
        assignedCars = new RCar[capacity];
        count = 0;
    }

    public boolean addCar(RCar car) {
        if (count < assignedCars.length) {
            assignedCars[count] = car;
            count++;
            return true;
        }
        return false; // Catalog is full
    }

    public boolean deleteCar(String id) {
        for (int i = 0; i < count; i++) {
            if (assignedCars[i].getId().equals(id)) {
                // Shift the array elements to fill the gap left by the removed car
                System.arraycopy(assignedCars, i + 1, assignedCars, i, count - i - 1);
                assignedCars[count - 1] = null; // Nullify the last element
                count--;
                return true;
            }
        }
        return false; // Car not found to remove
    }

    public RCar[] getCarList() {
        RCar[] currentList = new RCar[count];
        System.arraycopy(assignedCars, 0, currentList, 0, count);
        return currentList;
    }

    public RCar searchCar(String id) {
        for (int i = 0; i < count; i++) {
            if (assignedCars[i].getId().equals(id)) {
                return assignedCars[i];
            }
        }
        return null; // Car not found
    }

    // Getter for count
    public int getCount() {
        return count;
    }
}

package Assignment3;

public class AssignmentHandler {
    private AssignedCatalog assignedCatalog; // This catalog keeps track of assigned cars
    private ParkingSpotManager parkingSpotManager; // This manages the parking spots

    // Constructor might take other parameters as needed, e.g., capacity
    public AssignmentHandler(int capacity, ParkingSpotManager parkingSpotManager) {
        this.assignedCatalog = new AssignedCatalog(capacity);
        this.parkingSpotManager = parkingSpotManager; // Use the provided ParkingSpotManager
    }

    // Handles the assignment of a parking spot to a resident car
    public boolean handleAssignment(RCar car, int spotNumber) {
        if (parkingSpotManager.assignResidentSpot(spotNumber)) {
            car.setSpotNo(spotNumber); // Assume RCar has a setSpotNo method
            return assignedCatalog.addCar(car);
        }
        return false;
    }

    // Searches for a car that has been assigned a parking spot
    public RCar searchAssignedCar(String carId) {
        return assignedCatalog.searchCar(carId);
    }

    // Gets a list of all cars that have been assigned a parking spot
    public RCar[] getRCarList() {
        return assignedCatalog.getCarList();
    }
}

package Assignment3;

public class CanceledCatalog {
    private RCar[] canceledCars;
    private int count; // To keep track of the number of canceled cars

    public CanceledCatalog(int capacity) {
        canceledCars = new RCar[capacity];
        count = 0;
    }

    public boolean addCar(RCar car) {
        if (count < canceledCars.length) {
            canceledCars[count] = car;
            count++;
            return true;
        }
        return false; // Catalog is full
    }

    public boolean deleteCar(String id) {
        for (int i = 0; i < count; i++) {
            if (canceledCars[i].getId().equals(id)) {
                // Shift the array elements to fill the gap left by the removed car
                System.arraycopy(canceledCars, i + 1, canceledCars, i, count - i - 1);
                canceledCars[count - 1] = null; // Nullify the last element
                count--;
                return true;
            }
        }
        return false; // Car not found to remove
    }

    public RCar[] getCarList() {
        RCar[] currentList = new RCar[count];
        System.arraycopy(canceledCars, 0, currentList, 0, count);
        return currentList;
    }

    // Getter for count
    public int getCount() {
        return count;
    }
}

package Assignment3;

import java.time.Duration;
import java.time.LocalDateTime;

public class Car {
    private String id;
    private String phoneNo;
    private int spotNo;
    private LocalDateTime enterTime;
    private LocalDateTime exitTime;

    // Constructor to initialize a new Car object
    public Car(String id, String phoneNo, int spotNo) {
        this.id = id;
        this.phoneNo = phoneNo;
        this.spotNo = spotNo;
    }

    public double calcParkingFee(double feePerHour) {
        // Check if enterTime and exitTime are set
        if (enterTime == null || exitTime == null) {
            throw new IllegalStateException("Enter and exit time must be set before calculating the fee.");
        }

        // Calculate the duration in hours
        long hours = Duration.between(enterTime, exitTime).toHours();
        return hours * feePerHour;
    }

    // Calculates the parking duration in minutes
    public long getParkingDurationInMinutes() {
        if (enterTime == null || exitTime == null) {
            throw new IllegalStateException("Enter and exit time must be set before calculating the duration.");
        }
        return Duration.between(enterTime, exitTime).toMinutes();
    }

    public void setEnterTime(LocalDateTime enterTime) {
        this.enterTime = enterTime;
    }

    public void setExitTime(LocalDateTime exitTime) {
        this.exitTime = exitTime;
    }

    // Getter for spotNo
    public int getSpotNo() {
        return this.spotNo;
    }

    // Getter for CarId
    public String getId() {
        return this.id;
    }

    // Other getters and setters as needed
    // ...
}

package Assignment3;

public class DateTime {
    private int year;
    private int month;
    private int date;
    private int hour;
    private int minute;

    // Constructor to initialize a new DateTime object
    public DateTime(int year, int month, int date, int hour, int minute) {
        this.year = year;
        this.month = month;
        this.date = date;
        this.hour = hour;
        this.minute = minute;
    }
}//end of the DataTime.java

package Assignment3;

public class ParkedCarCatalog {
    private Car[] parkedCars;
    private int count; // To keep track of the number of parked cars

    public ParkedCarCatalog(int capacity) {
        parkedCars = new Car[capacity];
        count = 0;
    }

    // Adds a car to the catalog
    public boolean addCar(Car car) {
        if (count >= parkedCars.length) {
            return false; // Catalog is full
        }
        parkedCars[count] = car;
        count++;
        return true;
    }

    // Deletes a car from the catalog by its ID
    public boolean deleteCar(String id) {
        for (int i = 0; i < count; i++) {
            if (parkedCars[i].getId().equals(id)) {
                System.arraycopy(parkedCars, i + 1, parkedCars, i, count - i - 1);
                parkedCars[count - 1] = null; // Nullify the last element
                count--;
                return true;
            }
        }
        return false; // Car not found
    }

    // Retrieves the list of all parked cars
    public Car[] getCarList() {
        Car[] currentList = new Car[count];
        System.arraycopy(parkedCars, 0, currentList, 0, count);
        return currentList;
    }

    // Searches for a car by its ID
    public Car findCar(String id) {
        for (int i = 0; i < count; i++) {
            if (parkedCars[i].getId().equals(id)) {
                return parkedCars[i];
            }
        }
        return null; // Car not found
    }

    // Getter for the count
    public int getCount() {
        return count;
    }
}

package Assignment3;

public class ParkedRCarCatalog {
    private RCar[] parkedRCars;
    private int count; // To keep track of the number of parked resident cars

    public ParkedRCarCatalog(int capacity) {
        parkedRCars = new RCar[capacity];
        count = 0;
    }

    // Adds a resident car to the catalog
    public boolean addCar(RCar car) {
        if (count < parkedRCars.length) {
            parkedRCars[count] = car;
            count++;
            return true;
        }
        return false; // Catalog is full
    }

    // Deletes a resident car from the catalog by its ID
    public boolean deleteCar(String id) {
        for (int i = 0; i < count; i++) {
            if (parkedRCars[i].getId().equals(id)) {
                System.arraycopy(parkedRCars, i + 1, parkedRCars, i, count - i - 1);
                parkedRCars[count - 1] = null; // Nullify the last element
                count--;
                return true;
            }
        }
        return false; // Car not found
    }

    // Retrieves the list of all parked resident cars
    public RCar[] getCarList() {
        RCar[] currentList = new RCar[count];
        System.arraycopy(parkedRCars, 0, currentList, 0, count);
        return currentList;
    }

    // Searches for a resident car by its ID
    public RCar findCar(String id) {
        for (int i = 0; i < count; i++) {
            if (parkedRCars[i].getId().equals(id)) {
                return parkedRCars[i];
            }
        }
        return null; // Car not found
    }

    // Getter for the count
    public int getCount() {
        return count;
    }
}

package Assignment3;

public class ParkingHandler {
    private ParkedCarCatalog parkedCarCatalog;
    private ParkedRCarCatalog parkedRCarCatalog;
    private UnparkedCarCatalog unparkedCarCatalog;

    public ParkingHandler(int capacity) {
        this.parkedCarCatalog = new ParkedCarCatalog(capacity);
        this.parkedRCarCatalog = new ParkedRCarCatalog(capacity);
        this.unparkedCarCatalog = new UnparkedCarCatalog(capacity);
    }

    // Handles the entry of a non-resident car
    public boolean handleCarEnter(Car car) {
        return parkedCarCatalog.addCar(car);
    }

    // Handles the entry of a resident car
    public boolean handleResidentCarEnter(RCar car) {
        return parkedRCarCatalog.addCar(car);
    }

    // Handles the exit of a car
    public boolean handleCarExit(String carId) {
        Car car = parkedCarCatalog.findCar(carId);
        if (car != null) {
            parkedCarCatalog.deleteCar(carId);
            unparkedCarCatalog.addCar(car); // Adds to unparked catalog for income calculation
            return true;
        }
        
        RCar rCar = parkedRCarCatalog.findCar(carId);
        if (rCar != null) {
            parkedRCarCatalog.deleteCar(carId);
            // Assuming RCar also extends Car or they are of the same type
            return true;
        }
        return false; // Car was not found in either catalog
    }

    // Retrieves a list of all parked non-resident cars
    public Car[] getParkedCarList() {
        return parkedCarCatalog.getCarList();
    }

    // Retrieves a list of all parked resident cars
    public RCar[] getParkedRCarList() {
        return parkedRCarCatalog.getCarList();
    }
}

package Assignment3;

public class ParkingSpotManager {
    private boolean[] spotsOccupied; // True if spot is occupied, false if available
    private int count; // Number of spots currently occupied

    public ParkingSpotManager(int N) {
        this.spotsOccupied = new boolean[N];
        this.count = 0;
    }

    public boolean assignResidentSpot(int spotNumber) {
        if (spotNumber >= 1 && spotNumber <= spotsOccupied.length && !spotsOccupied[spotNumber - 1]) {
            spotsOccupied[spotNumber - 1] = true;
            count++;
            return true;
        }
        return false;
    }

    public boolean cancelResidentSpot(int spotNumber) {
        if (spotNumber >= 1 && spotNumber <= spotsOccupied.length && spotsOccupied[spotNumber - 1]) {
            spotsOccupied[spotNumber - 1] = false;
            count--;
            return true;
        }
        return false;
    }

    // Assuming parkResident would simply mark the spot as occupied
    public boolean parkResident(int spotNumber) {
        // This can be similar to assignResidentSpot if parking directly assigns the spot
        return assignResidentSpot(spotNumber);
    }

    public boolean returnSpot(int spotNumber) {
        if (spotNumber >= 1 && spotNumber <= spotsOccupied.length && spotsOccupied[spotNumber - 1]) {
            spotsOccupied[spotNumber - 1] = false;
            count--;
            return true;
        }
        return false;
    }

    // Optionally, if you need to track assignments for non-residents as well:
    public boolean assignSpot(int spotNumber) {
        // This could be the same as assignResidentSpot if there's no distinction in assignment between residents and non-residents
        return assignResidentSpot(spotNumber);
    }
}

package Assignment3;

import java.time.LocalDateTime;

public class RCar {
    private String id;
    private int spotNo;
    private LocalDateTime cancelDate; // This will store the cancellation date if applicable

    // Constructor to initialize a new RCar object
    public RCar(String id, int spotNo) {
        this.id = id;
        this.spotNo = spotNo;
    }

    // Method to calculate parking fee
    public double calcParkingFee(LocalDateTime enterTime, LocalDateTime exitTime) {
        // Check if enterTime and exitTime are valid
        if (enterTime == null || exitTime == null || exitTime.isBefore(enterTime)) {
            throw new IllegalArgumentException("Enter time must be before exit time.");
        }
        long hours = java.time.Duration.between(enterTime, exitTime).toHours();
        double feePerHour = 2.50; // Assuming a fee of $2.50 per hour
        return hours * feePerHour;
    }

    // Getter for spotNo
    public int getSpotNo() {
        return this.spotNo;
    }

    // Setter for cancelDate
    public int setSpotNo(int spotNo){
        return this.spotNo=spotNo;
    }

    //Getter for getId
    public String getId(){
        return id;
    }

    // Setter for cancelDate
    public void setCancelDate(LocalDateTime cancelDate) {
        this.cancelDate = cancelDate;
    }
}//End of the RCar.java

package Assignment3;
//Resident.java
class Resident {
    private String name;
    private String phoneNumber;

    public Resident(String name, String phoneNumber) {
        this.name = name;
        this.phoneNumber = phoneNumber;
    }

    public String getName() {
        return name;
    }
    public String getPhoneNumber(){
        return phoneNumber;
    }
}//End of the Resident.java

package Assignment3;
//ResidentManager.java
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class ResidentManager {
    private List<Resident> residents;

    public ResidentManager() {
        residents = new ArrayList<>();
    }

    // Method to load residents from a file
    public void loadResidentsFromFile(String filename) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filename));
            // Skip the first line as it contains the number of residents
            for (int i = 1; i < lines.size(); i++) {
                String[] parts = lines.get(i).split(" ");
                String phoneNumber = parts[0];
                String name = parts[1];
                residents.add(new Resident(name, phoneNumber));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to add a resident to the manager
    public void addResident(Resident resident) {
        residents.add(resident);
    }

    // Method to search for a resident by their PhoneNumber
    public Resident searchResident(String phoneNumber) {
        for (Resident resident : residents) {
            if (resident.getPhoneNumber().equals(phoneNumber)) {
                return resident;
            }
        }
        return null; // Resident not found
    }

    // Method to get a resident's name by their ID
    public String getName(String id) {
        Resident resident = searchResident(id);
        return (resident != null) ? resident.getName() : null;
    }
}//End of the ResidentManager.java

package Assignment3;

public class StatisticHandler {
    private AssignedCatalog assignedCatalog;
    private UnparkedCarCatalog unparkedCarCatalog;
    private double monthlyResidentRate;
    private double nonResidentRatePerTenMinutes;

    // Constructor
    public StatisticHandler(AssignedCatalog assignedCatalog, UnparkedCarCatalog unparkedCarCatalog, 
                            double monthlyResidentRate, double nonResidentRatePerTenMinutes) {
        this.assignedCatalog = assignedCatalog;
        this.unparkedCarCatalog = unparkedCarCatalog;
        this.monthlyResidentRate = monthlyResidentRate;
        this.nonResidentRatePerTenMinutes = nonResidentRatePerTenMinutes;
    }

    // Method to handle the display of monthly income
    public void handleMonthlyIncome() {
        double income = calcMonthlyIncome();
        System.out.println("Total monthly income: $" + income);
    }

    // Method to calculate the monthly income
    private double calcMonthlyIncome() {
        // Calculate income from resident cars
        double incomeFromResidents = assignedCatalog.getCount() * monthlyResidentRate;

        // Calculate income from non-resident cars
        double incomeFromNonResidents = 0.0;
        Car[] cars = unparkedCarCatalog.getCarList();
        for (Car car : cars) {
            // Calculate the total time the car was parked in minutes
            long parkedTimeInMinutes = car.getParkingDurationInMinutes();
            incomeFromNonResidents += (parkedTimeInMinutes / 10) * nonResidentRatePerTenMinutes;
        }

        return incomeFromResidents + incomeFromNonResidents;
    }
}

package Assignment3;

public class UnparkedCarCatalog {
    private Car[] unparkedCars;
    private int count; // To keep track of the number of unparked cars

    public UnparkedCarCatalog(int capacity) {
        unparkedCars = new Car[capacity];
        count = 0;
    }

    // Adds a car to the catalog
    public boolean addCar(Car car) {
        if (count < unparkedCars.length) {
            unparkedCars[count] = car;
            count++;
            return true;
        }
        return false; // Catalog is full
    }

    // Retrieves the list of all unparked cars
    public Car[] getCarList() {
        Car[] currentList = new Car[count];
        System.arraycopy(unparkedCars, 0, currentList, 0, count);
        return currentList;
    }

    // Getter for the count
    public int getCount() {
        return count;
    }
}